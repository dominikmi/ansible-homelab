---
# tasks file for cfssl-pki

- name: Load a variable file based on the OS type
  include_vars: "{{ item }}"
  with_first_found:
    - '{{ansible_distribution|lower}}-vars.yml'
    - main.yml

- name: Install go for RHEL family
  yum: 
    name: go
    state: latest
    update_cache: true
  when: (ansible_distribution == 'Fedora' or ansible_distribution == 'CentOS') and ca_store == 'true'
  run_once: true

- name: Install go for Ubuntu
  apt:
    name: go
    state: latest
    update_cache: true
  when: (ansible_distribution == 'Ubuntu') and ca_store == 'true'
  run_once: true

- name: Downloading & installing cfssl binaries
  ansible.builtin.command: go get {{ cfssl_github_uri }}
  when: ca_store == 'true'

- name: Check if the ssl config directory exists
  stat:
    path: "{{ cfssl_config_dir }}" 
  register: config_dir

- name: Create ssl/config folder in /opt
  file:
    path: "{{ cfssl_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
    recurse: yes
  when: not config_dir.stat.exists and ca_store == 'true'

- name: Generate configs for ca, intermediate and cfssl in /opt/ssl/config
  delegate_to: '{{ ca_store_host }}'
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '0644'
  loop:
    - { src: 'roles/cfssl-pki/templates/{{ cfssl_interm_config_file }}.j2', dest: '{{ cfssl_config_dir }}/{{ cfssl_interm_config_file }}' }
    - { src: 'roles/cfssl-pki/templates/{{ cfssl_ca_config_file }}.j2', dest: '{{ cfssl_config_dir }}/{{ cfssl_ca_config_file }}' }
    - { src: 'roles/cfssl-pki/templates/{{ cfssl_config_file }}.j2', dest: '{{ cfssl_config_dir }}/{{ cfssl_config_file }}' }
  when: ca_store == 'true'

- name: Create CA & Intermediate CA, sign Intermediate CA with CA key
  shell: '{{ item }}'
  args:
    chdir: "{{cfssl_home}}"
  loop:
    - 'cfssl gencert -initca {{ cfssl_config_dir }}/{{ cfssl_ca_config_file }} | cfssljson -bare {{ cfssl_ca_prefix }}'
    - 'cfssl gencert -initca {{ cfssl_config_dir }}/{{ cfssl_interm_config_file }} | cfssljson -bare {{ cfssl_intermediate_ca_prefix }}'
    - 'cfssl sign -ca {{ cfssl_ca_prefix }}.pem -ca-key {{ cfssl_ca_prefix }}-key.pem -config {{ cfssl_config_dir }}/{{ cfssl_config_file }} -profile {{ cfssl_intermediate_ca_prefix }} {{ cfssl_intermediate_ca_prefix }}.csr | cfssljson -bare {{ cfssl_intermediate_ca_prefix }}'
  when: ca_store == 'true'

- name: Create CA & Intermediate with .crt extension for Ubuntu
  copy: 
    src: '{{ item.src }}' 
    dest: '{{ item.dest }}'
    owner: root
    group: root
    mode: 0644
  loop:
    - {src: '{{cfssl_home}}/{{cfssl_ca_prefix}}.pem', dest: '{{cfssl_home}}/{{cfssl_ca_prefix}}.crt'}
    - {src: '{{cfssl_home}}/{{cfssl_intermediate_ca_prefix}}.pem', dest: '{{cfssl_home}}/{{cfssl_intermediate_ca_prefix}}.crt'}
  when: ca_store == 'true'

- name: Create host cert configs & generate host certs
  template:
    src: 'roles/cfssl-pki/templates/host_cert_conf.json.j2'
    dest: '{{ cfssl_config_dir }}/{{ ansible_hostname }}.json'
  delegate_to: '{{ ca_store_host }}'
  notify:
    - generate_host_cert

- name: Copy CA & intermediate to controller
  run_once: yes
  fetch: 
    src: '{{ item }}' 
    dest: '{{ cfssl_buffer }}' 
    flat: yes
  loop: 
    - '{{cfssl_home}}/{{cfssl_ca_prefix}}.pem'
    - '{{cfssl_home}}/{{cfssl_intermediate_ca_prefix}}.pem'
    - '{{cfssl_home}}/{{cfssl_ca_prefix}}.crt'
    - '{{cfssl_home}}/{{cfssl_intermediate_ca_prefix}}.crt'    
  when: ca_store == 'true'  

